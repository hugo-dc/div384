#define macro MUL384 = takes(1) returns(1) {
  // https://notes.ethereum.org/6miRlBALTharEA_HTKvTWA#mul384

  // Takes one stack element containing the offsets corresponding to the
  // memory locations of $a$ and $b$.

  // Get output offset
  dup1    // 177
  160 shl
  224 shr
  
  // Get element $a$ offsets:
  swap1   // 184
  dup1
  192 shl
  224 shr // 191
  dup1
  24 add

  // Get element $b$ offfset:
  swap1    // 196
  swap2    
  224 shl
  224 shr  // 203
  dup1
  24 add   // 207

  // mul384:u384*u384->u768
  // 1. Break both input values up into pairs of 192-bit limbs using bit shifts
  // Read a_1
  swap3 mload     // 208 - read first limb $a_1$
  msize
  swap1 dup2
  mstore 

  // a_2
  swap2 mload  
  msize       
  swap1 dup2
  mstore

  // b_1
  swap1 mload   // 220
  msize
  swap1 dup2
  mstore

  // b_2
  dup4 mload   // 226
  msize
  swap1 dup2
  mstore
  
  
  // 2. Do four mulmodmont384 with mod=0,inv=0 over pairs of these 192-bit limbs
  // $b_2 \cdot a_2$

  // create position in memory for first result
  00 384 mstore
  00 416 mstore
  // get limb2 of a
  
  // get limb2 of b
  //       |       |       |       |  out  |   b2  |    a2 |mod_inv|
  //       |       |       |       |       |   x   |   y   |       |
  //       |       |       |       |  384  |   352 |  288  |  00   | 
  0x0000000000000000000000000000000000000180000001600000012000000000 mulmodmont384 // 
  
  //00 0x80  mstore  // store 0s in memory offset 0x80
  //00 0x100 mstore  //
  
  //0x00   // inv value = 0
  //0x80   // mod = 0 offset
  //dup3   // $y = a_2$
  //dup2   // $x = b_2$

  //mulmodmont384
  
  // $b_2 \cdot a_1$
  // $b_1 \cdot a_2$
  // $b_1 \cdot a_1$
     
  // 3. Add the resulting four 384-bit values. But we need add-with-carry, so we
  //    might have to break each of those four 384-bit values into 192-bit limbs
  //    (using shifts) and do six add384s, and shifts to isolate the carry bit twice.
  
  // 4. Concatenate the resulting 192-bit limbs together using shifts.
}
